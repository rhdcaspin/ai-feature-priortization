{"ast":null,"code":"import axios from'axios';// Create axios instance with base configuration\nconst api=axios.create({baseURL:'/api',timeout:30000,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>{return Promise.reject(error);});// Response interceptor to handle auth errors\napi.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');window.location.href='/login';}return Promise.reject(error);});// API service methods\nexport const apiService={// Authentication\nauth:{login:(username,password)=>api.post('/auth/login',{username,password}),register:(username,email,password)=>api.post('/auth/register',{username,email,password}),me:()=>api.get('/auth/me'),setupAdmin:(username,email,password)=>api.post('/auth/setup-admin',{username,email,password}),users:()=>api.get('/auth/users')},// Jira integration\njira:{test:()=>api.get('/jira/test'),getProjects:()=>api.get('/jira/projects'),getProjectVersions:projectKey=>api.get(`/jira/projects/${projectKey}/versions`),getProjectIssues:function(projectKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return api.get(`/jira/projects/${projectKey}/issues`,{params});},updateIssueRank:(issueKey,rank)=>api.put(`/jira/issues/${issueKey}/rank`,{rank}),bulkUpdateRanks:(projectKey,targetVersion)=>api.post('/jira/bulk-update-ranks',{projectKey,targetVersion})},// Projects\nprojects:{getAll:()=>api.get('/projects'),getByKey:projectKey=>api.get(`/projects/${projectKey}`),getTickets:function(projectKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return api.get(`/projects/${projectKey}/tickets`,{params});},getVersions:projectKey=>api.get(`/projects/${projectKey}/versions`),getProgress:function(projectKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return api.get(`/projects/${projectKey}/progress`,{params});},getParticipation:function(projectKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return api.get(`/projects/${projectKey}/participation`,{params});},update:(projectKey,data)=>api.put(`/projects/${projectKey}`,data),delete:projectKey=>api.delete(`/projects/${projectKey}`),export:function(projectKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return api.get(`/projects/${projectKey}/export`,{params});}},// Rankings\nrankings:{submit:(userId,ticketKey,ranking,comments)=>api.post('/ranking/rank',{userId,ticketKey,ranking,comments}),getTicketRankings:ticketKey=>api.get(`/ranking/ticket/${ticketKey}`),getProjectSummary:(projectKey,targetVersion)=>api.get(`/ranking/project/${projectKey}/version/${targetVersion}/summary`),getUserRankings:(userId,projectKey,targetVersion)=>api.get(`/ranking/user/${userId}/project/${projectKey}/version/${targetVersion}`),getProjectStats:projectKey=>api.get(`/ranking/project/${projectKey}/stats`),deleteRanking:(userId,ticketKey)=>api.delete(`/ranking/user/${userId}/ticket/${ticketKey}`)},// Health check\nhealth:()=>api.get('/health')};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","apiService","auth","login","username","password","post","register","email","me","get","setupAdmin","users","jira","test","getProjects","getProjectVersions","projectKey","getProjectIssues","params","arguments","length","undefined","updateIssueRank","issueKey","rank","put","bulkUpdateRanks","targetVersion","projects","getAll","getByKey","getTickets","getVersions","getProgress","getParticipation","update","data","delete","export","rankings","submit","userId","ticketKey","ranking","comments","getTicketRankings","getProjectSummary","getUserRankings","getProjectStats","deleteRanking","health"],"sources":["/Users/dcaspin/Projects/aifeaturepriortization/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API service methods\nexport const apiService = {\n  // Authentication\n  auth: {\n    login: (username, password) => api.post('/auth/login', { username, password }),\n    register: (username, email, password) => api.post('/auth/register', { username, email, password }),\n    me: () => api.get('/auth/me'),\n    setupAdmin: (username, email, password) => api.post('/auth/setup-admin', { username, email, password }),\n    users: () => api.get('/auth/users'),\n  },\n\n  // Jira integration\n  jira: {\n    test: () => api.get('/jira/test'),\n    getProjects: () => api.get('/jira/projects'),\n    getProjectVersions: (projectKey) => api.get(`/jira/projects/${projectKey}/versions`),\n    getProjectIssues: (projectKey, params = {}) => api.get(`/jira/projects/${projectKey}/issues`, { params }),\n    updateIssueRank: (issueKey, rank) => api.put(`/jira/issues/${issueKey}/rank`, { rank }),\n    bulkUpdateRanks: (projectKey, targetVersion) => api.post('/jira/bulk-update-ranks', { projectKey, targetVersion }),\n  },\n\n  // Projects\n  projects: {\n    getAll: () => api.get('/projects'),\n    getByKey: (projectKey) => api.get(`/projects/${projectKey}`),\n    getTickets: (projectKey, params = {}) => api.get(`/projects/${projectKey}/tickets`, { params }),\n    getVersions: (projectKey) => api.get(`/projects/${projectKey}/versions`),\n    getProgress: (projectKey, params = {}) => api.get(`/projects/${projectKey}/progress`, { params }),\n    getParticipation: (projectKey, params = {}) => api.get(`/projects/${projectKey}/participation`, { params }),\n    update: (projectKey, data) => api.put(`/projects/${projectKey}`, data),\n    delete: (projectKey) => api.delete(`/projects/${projectKey}`),\n    export: (projectKey, params = {}) => api.get(`/projects/${projectKey}/export`, { params }),\n  },\n\n  // Rankings\n  rankings: {\n    submit: (userId, ticketKey, ranking, comments) => \n      api.post('/ranking/rank', { userId, ticketKey, ranking, comments }),\n    getTicketRankings: (ticketKey) => api.get(`/ranking/ticket/${ticketKey}`),\n    getProjectSummary: (projectKey, targetVersion) => \n      api.get(`/ranking/project/${projectKey}/version/${targetVersion}/summary`),\n    getUserRankings: (userId, projectKey, targetVersion) => \n      api.get(`/ranking/user/${userId}/project/${projectKey}/version/${targetVersion}`),\n    getProjectStats: (projectKey) => api.get(`/ranking/project/${projectKey}/stats`),\n    deleteRanking: (userId, ticketKey) => api.delete(`/ranking/user/${userId}/ticket/${ticketKey}`),\n  },\n\n  // Health check\n  health: () => api.get('/health'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}