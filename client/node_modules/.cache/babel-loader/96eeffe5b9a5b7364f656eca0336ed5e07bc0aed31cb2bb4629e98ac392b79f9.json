{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// API service methods\nexport const apiService = {\n  // Authentication\n  auth: {\n    login: (username, password) => api.post('/auth/login', {\n      username,\n      password\n    }),\n    register: (username, email, password) => api.post('/auth/register', {\n      username,\n      email,\n      password\n    }),\n    me: () => api.get('/auth/me'),\n    setupAdmin: (username, email, password) => api.post('/auth/setup-admin', {\n      username,\n      email,\n      password\n    })\n  },\n  // Jira integration\n  jira: {\n    test: () => api.get('/jira/test'),\n    getProjects: () => api.get('/jira/projects'),\n    getProjectVersions: projectKey => api.get(`/jira/projects/${projectKey}/versions`),\n    getProjectIssues: (projectKey, params = {}) => api.get(`/jira/projects/${projectKey}/issues`, {\n      params\n    }),\n    updateIssueRank: (issueKey, rank) => api.put(`/jira/issues/${issueKey}/rank`, {\n      rank\n    }),\n    bulkUpdateRanks: (projectKey, targetVersion) => api.post('/jira/bulk-update-ranks', {\n      projectKey,\n      targetVersion\n    })\n  },\n  // Projects\n  projects: {\n    getAll: () => api.get('/projects'),\n    getByKey: projectKey => api.get(`/projects/${projectKey}`),\n    getTickets: (projectKey, params = {}) => api.get(`/projects/${projectKey}/tickets`, {\n      params\n    }),\n    getVersions: projectKey => api.get(`/projects/${projectKey}/versions`),\n    getProgress: (projectKey, params = {}) => api.get(`/projects/${projectKey}/progress`, {\n      params\n    }),\n    getParticipation: (projectKey, params = {}) => api.get(`/projects/${projectKey}/participation`, {\n      params\n    }),\n    update: (projectKey, data) => api.put(`/projects/${projectKey}`, data),\n    delete: projectKey => api.delete(`/projects/${projectKey}`),\n    export: (projectKey, params = {}) => api.get(`/projects/${projectKey}/export`, {\n      params\n    })\n  },\n  // Rankings\n  rankings: {\n    submit: (userId, ticketKey, ranking, comments) => api.post('/ranking/rank', {\n      userId,\n      ticketKey,\n      ranking,\n      comments\n    }),\n    getTicketRankings: ticketKey => api.get(`/ranking/ticket/${ticketKey}`),\n    getProjectSummary: (projectKey, targetVersion) => api.get(`/ranking/project/${projectKey}/version/${targetVersion}/summary`),\n    getUserRankings: (userId, projectKey, targetVersion) => api.get(`/ranking/user/${userId}/project/${projectKey}/version/${targetVersion}`),\n    getProjectStats: projectKey => api.get(`/ranking/project/${projectKey}/stats`),\n    deleteRanking: (userId, ticketKey) => api.delete(`/ranking/user/${userId}/ticket/${ticketKey}`)\n  },\n  // Health check\n  health: () => api.get('/health')\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","apiService","auth","login","username","password","post","register","email","me","get","setupAdmin","jira","test","getProjects","getProjectVersions","projectKey","getProjectIssues","params","updateIssueRank","issueKey","rank","put","bulkUpdateRanks","targetVersion","projects","getAll","getByKey","getTickets","getVersions","getProgress","getParticipation","update","data","delete","export","rankings","submit","userId","ticketKey","ranking","comments","getTicketRankings","getProjectSummary","getUserRankings","getProjectStats","deleteRanking","health"],"sources":["/Users/dcaspin/Projects/aifeaturepriortization/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API service methods\nexport const apiService = {\n  // Authentication\n  auth: {\n    login: (username, password) => api.post('/auth/login', { username, password }),\n    register: (username, email, password) => api.post('/auth/register', { username, email, password }),\n    me: () => api.get('/auth/me'),\n    setupAdmin: (username, email, password) => api.post('/auth/setup-admin', { username, email, password }),\n  },\n\n  // Jira integration\n  jira: {\n    test: () => api.get('/jira/test'),\n    getProjects: () => api.get('/jira/projects'),\n    getProjectVersions: (projectKey) => api.get(`/jira/projects/${projectKey}/versions`),\n    getProjectIssues: (projectKey, params = {}) => api.get(`/jira/projects/${projectKey}/issues`, { params }),\n    updateIssueRank: (issueKey, rank) => api.put(`/jira/issues/${issueKey}/rank`, { rank }),\n    bulkUpdateRanks: (projectKey, targetVersion) => api.post('/jira/bulk-update-ranks', { projectKey, targetVersion }),\n  },\n\n  // Projects\n  projects: {\n    getAll: () => api.get('/projects'),\n    getByKey: (projectKey) => api.get(`/projects/${projectKey}`),\n    getTickets: (projectKey, params = {}) => api.get(`/projects/${projectKey}/tickets`, { params }),\n    getVersions: (projectKey) => api.get(`/projects/${projectKey}/versions`),\n    getProgress: (projectKey, params = {}) => api.get(`/projects/${projectKey}/progress`, { params }),\n    getParticipation: (projectKey, params = {}) => api.get(`/projects/${projectKey}/participation`, { params }),\n    update: (projectKey, data) => api.put(`/projects/${projectKey}`, data),\n    delete: (projectKey) => api.delete(`/projects/${projectKey}`),\n    export: (projectKey, params = {}) => api.get(`/projects/${projectKey}/export`, { params }),\n  },\n\n  // Rankings\n  rankings: {\n    submit: (userId, ticketKey, ranking, comments) => \n      api.post('/ranking/rank', { userId, ticketKey, ranking, comments }),\n    getTicketRankings: (ticketKey) => api.get(`/ranking/ticket/${ticketKey}`),\n    getProjectSummary: (projectKey, targetVersion) => \n      api.get(`/ranking/project/${projectKey}/version/${targetVersion}/summary`),\n    getUserRankings: (userId, projectKey, targetVersion) => \n      api.get(`/ranking/user/${userId}/project/${projectKey}/version/${targetVersion}`),\n    getProjectStats: (projectKey) => api.get(`/ranking/project/${projectKey}/stats`),\n    deleteRanking: (userId, ticketKey) => api.delete(`/ranking/user/${userId}/ticket/${ticketKey}`),\n  },\n\n  // Health check\n  health: () => api.get('/health'),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}